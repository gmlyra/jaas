version: "3.7"
services:
  prometheus:
    profiles:
      - production
    image: "prom/prometheus:${PROMETHEUS_VERSION}"
    container_name: Prometheus
    restart: always
    ports:
      - ${PROMETHEUS_PORT}:${PROMETHEUS_PORT}
  grafana:
    profiles:
      - production
    image: "grafana/grafana:${GRAFANA_VERSION}"
    container_name: Grafana
    restart: always
    ports:
      - ${GRAFANA_PORT}:${GRAFANA_PORT}
    expose:
      - ${GRAFANA_PORT}
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
  db:
    image: "postgres:${POSTGRES_VERSION}"
    container_name: Database
    restart: always

    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    volumes:
      - ./sql/init.sql:/docker-entrypoint-initdb.d/create_tables.sql
  redis:
    image: "redis:${REDIS_VERSION}"
    container_name: Redis
    restart: always
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - save 900 1
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
  postgrest:
    image: "postgrest/postgrest"
    container_name: Postgrest
    restart: always
    depends_on:
      - db
    environment:
      - PGRST_DB_URI=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:${POSTGRES_PORT}/${POSTGRES_DB}
      - PGRST_OPENAPI_SERVER_PROXY_URI=http://localhost:${POSTGREST_PORT}
      - PGRST_DB_SCHEMA=${PGRST_DB_SCHEMA}
      - PGRST_DB_ANON_ROLE=${PGRST_DB_ANON_ROLE}
      - PGRST_JWT_SECRET=${PGRST_JWT_SECRET}
      - PGRST_OPENAPI_SECURITY_ACTIVE=TRUE
    ports:
      - ${POSTGREST_PORT}:${POSTGREST_PORT}
    expose:
      - "${POSTGREST_PORT}"
  dashboard:
    profiles:
      - production
    restart: always
    container_name: Dashboard
    build:
      context: ./dashboard/
    ports:
      - "3000:3000"
  swagger:
    image: swaggerapi/swagger-ui
    ports:
      - "8080:8080"
    expose:
      - "8080"
    environment:
      API_URL: http://localhost:3000/
